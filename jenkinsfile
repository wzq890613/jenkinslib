//流水线定义:

@Library('jenkinslib') _     

def mytools = new org.devops.tools()

//String workspace = "/root/.jenkins/workspace"

pipeline{
    
    agent{
        node{
            label "master"  //指定运行节点的标签或名称
                //customWorkspace "${workspace}" //指定运行工作目录(可选)
        }
    }
    options{
        timestamps()        //日志会有时间
        skipDefaultCheckout()        //删除隐式 checkout scrm语句
        disableConcurrentBuilds()        //禁止运行
        timeout(time: 1,unit: "HOURS")        //流水线超时时间
    }


stages {
    //下载代码
    stage("GetGode"){//阶段名称
        
        steps{//步骤
            timeout(time:5,unit:"MINUTES"){//步骤超时时间
                script{//填写运行代码
                    println("获取代码")
                    mytools.PrintMes("获取代码",'green')
                }
            }
        }
        
    }
    //构建
    stage("Build"){//阶段名称
        
        steps{//步骤
            timeout(time:20,unit:"MINUTES"){
                script{//填写运行代码
                     mytools.PrintMes("应用打包",'red')
                }
            }
        }
        
    }
    
    stage("CodeScan"){//阶段名称
        
        steps{//步骤
            
            timeout(time:30,unit:"MINUTES"){
                script{//填写运行代码
                    //print("代码扫描 ")
                    mytools.PrintMes("代码扫描 ",'blue')
                }
            }
            
        }
        
    }
    
    
}
//构建后操作
post {
    always {//总是执行脚本片段
        script{
            println("always")
            mail subject: "构建完成",
                   body: """
<div id="content">
  <h1>CI报告</h1>
  <div id="sum2">
      <h2>Jenkins 运行结果</h2>
      <ul>
      
          <li>jenkins的执行结果 : <a>jenkins 执行成功</a></li>
          <li>jenkins的URL : <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></li>
          <li>jenkins的Job名称 : <a id="url_1">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></li>
         
      </ul>
  </div>
  <div id="sum0">
  <h2>构建环境信息</h2>
  <ul>
    <li>构建环境为 : <a>${params.build_env}</a></li>
  </ul>
  <h2>GIT 信息</h2>
  <ul>
        <li>GIT项目的地址 : <a></a></li>
        <li>GIT项目当前的分支名 : </li>
        <li>GIT最后一次提交的commitID : </li>
  </ul>
  <h2>MAVEN 信息</h2>
  <ul>
    <li>maven服务路径为 : <a></a></li>
  </ul>

  
  </div>
  </div>
                  
             """,
            charset: 'utf-8',
            from: '472954284@qq.com',
            mimeType: 'text/html',
            to: '15261448393@139.com'
        }
    }
    
    success {//成功后执行
        script{
            currentBuild.description += "\n 构建成功 "
        }
    }
    failure {//失败执行
        script{
            currentBuild.description += "\n 构建失败 "
        }
    }
    
    aborted {//取消执行
        script{
            currentBuild.description += "\n 构建取消 "
        }
    }
    
    
}

}


/*
注:
currentBuild.description
currentBuild 全局变量
description 构建描述

Jenkinsfile的组成及每个部分的功能含义:

使用agent{}，指定node节点/workspace（定义好此流水线在某节点运行）
指定options{}运行选项（定义好此流水线运行时的一些选项，例如输出日志的时间）
指定stages{}（stages包含多个stage，stage包含steps。是流水线的每个步骤)
指定post{}（定义好此流水线运行成功或者失败后，根据状态做一些任务）
*/
